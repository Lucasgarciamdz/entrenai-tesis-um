# Clase 3: Calidad de Software

## Introducción

Esta clase se enfoca en los conceptos fundamentales de calidad de software, principalmente a través de los modelos propuestos por Garvin y McCall. Estos modelos, aunque desarrollados hace décadas, siguen siendo relevantes para entender las diferentes dimensiones y factores que contribuyen a la calidad del software.

## David A. Garvin

### Perfil

- Profesor de la Escuela de Negocios de Harvard desde 1979
- Autor del libro "Operations Strategy: Text and Cases"
- Nació el 12 de mayo de 1952 en Nueva York, Estados Unidos
- Falleció el 30 de abril de 2017 en Lexington, Massachusetts, Estados Unidos
- Destacado por su enfoque en el uso de casos para la enseñanza

### Dimensiones de Calidad según Garvin

> **Punto clave para examen:** Garvin sugiere que la calidad debe tomarse en cuenta adoptando un punto de vista multidimensional que comience con la evaluación de la conformidad y termine con una visión trascendental (estética).

1. **Calidad del Desempeño**
    - ¿El software entrega todo el contenido, funciones y características especificadas como parte del modelo de requerimientos, de manera que da valor al usuario final?
    - Se enfoca en si el software cumple su función básica ("hace lo que tiene que hacer")

2. **Calidad de las Características**
    - ¿El software tiene características que sorprenden y agradan la primera vez que lo emplean los usuarios finales?
    - Se relaciona con el "factor wow" o "aha moment" - cuando el usuario queda impresionado con la aplicación
    - *Ejemplo mencionado en clase:* Comparación entre Amazon y Mercado Libre para usuarios latinoamericanos

3. **Confiabilidad**
    - ¿El software proporciona todas las características y capacidades sin fallar?
    - ¿Está disponible cuando se necesita?
    - ¿Entrega funcionalidad libre de errores?
    - *Ejemplos mencionados:* Aplicaciones de bancos que no están disponibles durante procesos batch, chats de soporte que no responden

4. **Conformidad**
    - ¿El software concuerda con los estándares locales y externos que son relevantes para la aplicación?
    - ¿Concuerda con el diseño de facto y las convenciones de código?
    - ¿La interfaz de usuario está de acuerdo con las reglas aceptadas del diseño para la selección de menú o para la entrada de datos?
    - *Nota:* Muchos aspectos de conformidad no son visibles para el usuario (como cifrados de seguridad)

5. **Durabilidad**
    - ¿El software puede recibir mantenimiento (cambiar) o corregirse (depurarse) sin la generación inadvertida de eventos colaterales?
    - ¿Los cambios ocasionarán que la tasa de errores o la confiabilidad disminuyan con el tiempo?
    - *Relación con testing:* El testing de regresión es fundamental para mantener la durabilidad

6. **Servicio**
    - ¿Existe la posibilidad de que el software reciba mantenimiento (cambios) o correcciones (depuración) a corto plazo?
    - ¿El equipo de apoyo puede adquirir toda la información necesaria para hacer cambios o corregir defectos?
    - Se refiere a la capacidad del equipo de soporte para resolver problemas

7. **Estética**
    - Una entidad estética posee cierta elegancia, un flujo único y una "presencia" obvia que es difícil de cuantificar
    - Relacionada con la interfaz de usuario y cómo se ve y siente la aplicación
    - *Ejemplo:* Cuando los elementos visuales indican claramente que son clickeables o no

8. **Percepción**
    - En ciertas situaciones, existen prejuicios que influirán en la percepción de la calidad por parte del usuario
    - La percepción de calidad de un producto depende de la reputación del proveedor o vendedor
    - *Ejemplos mencionados:* Productos Apple que se perciben como de alta calidad, AMD vs. otras marcas, Samsung y su reputación cruzada entre productos

## Modelo de McCall

### Contexto

- Modelo creado en 1977 por McCall, Richard y Walters
- Sigue siendo ampliamente utilizado en la actualidad
- Descompone el concepto genérico de calidad en tres capacidades esenciales para el software

### Factores de Calidad de McCall

McCall organiza los factores de calidad en tres categorías principales:

1. **Revisión del Producto**
    - Facilidad de mantenimiento
    - Flexibilidad
    - Facilidad de prueba

2. **Transición del Producto**
    - Portabilidad
    - Reusabilidad
    - Interoperabilidad

3. **Operación del Producto**
    - Corrección
    - Fiabilidad
    - Usabilidad
    - Integridad
    - Eficiencia

#### Portabilidad
- Mide la facilidad con la que el software puede ser adaptado y ejecutado en diferentes plataformas o entornos
- Se puede ejecutar en diferentes plataformas o sistemas operativos sin necesidad de grandes modificaciones
- *Ejemplo:* Aplicaciones móviles que deben funcionar en Android e iOS, aplicaciones web que funcionan en diferentes navegadores

#### Reusabilidad
- Evalúa la capacidad de los componentes del software para ser utilizados en diferentes proyectos o aplicaciones
- Existen interfaces claras y bien documentadas para los componentes del software
- *Nivel código:* Modularización, funciones reutilizables
- *Nivel frontend:* Componentes visuales, design systems
- *Beneficios:* Identidad de marca consistente, facilita adaptación y aprendizaje para los usuarios

#### Interoperabilidad
- Mide la capacidad del software para comunicarse e intercambiar información con otros sistemas o aplicaciones
- Mecanismos para adaptar el software a diferentes formatos de datos y estructuras de intercambio
- *Ejemplos:* APIs, protocolos de comunicación como MSP

### Beneficios del Modelo de McCall

1. **Enfoque centrado en el usuario**
    - Se consideran las necesidades y expectativas de los usuarios al evaluar la calidad del software
    - *Ejemplos:* Aplicaciones de delivery vs. aplicaciones bancarias internas (prioridades diferentes)

2. **Visión holística**
    - Se evalúan diversos aspectos del software, desde su funcionamiento hasta su facilidad de mantenimiento y adaptación

3. **Base para la mejora continua**
    - Los factores identificados sirven como base para identificar áreas de mejora en el desarrollo de software
    - Fundamental para priorizar tareas en un roadmap

4. **Comunicación efectiva**
    - Se facilita la comunicación entre diferentes partes interesadas al hablar un lenguaje común sobre la calidad del software
    - Ayuda a los desarrolladores a entender y comunicar decisiones técnicas

### Limitaciones del Modelo de McCall

1. **Falta de métricas específicas**
    - Si bien los factores identifican atributos importantes, no siempre se dispone de métricas concretas para medirlos
    - La importancia de métricas para informar decisiones y prioridades de desarrollo

2. **Dependencia del contexto**
    - La relevancia de los factores puede variar dependiendo del tipo de software y su contexto de uso

3. **Evolución del software**
    - Con el tiempo, la importancia de algunos factores puede cambiar, requiriendo una actualización del modelo

## Usabilidad e Intuitividad

Un factor de calidad clave es qué tan intuitiva es la interfaz para el usuario:

- ¿La interfaz lleva hacia una comprensión fácil?
- ¿Todas las operaciones son fáciles de localizar e iniciar?
- ¿La interfaz usa una metáfora reconocible?
- ¿La entrada está especificada de modo que economiza el uso del teclado o del mouse?
- ¿La estética ayuda a la comprensión y uso?

> **Punto clave para examen:** La intuitividad depende del público objetivo. Lo que es intuitivo para un grupo puede no serlo para otro.

*Ejemplo mencionado:* Interfaces de juegos (teclado vs. controlador) y cómo diferentes usuarios tienen preferencias basadas en su experiencia previa.

## Aplicación Práctica: Análisis de Mala Usabilidad

Ejemplos de sitios web con mala usabilidad para analizar:
- http://www.lingscars.com/
- http://arngren.net/
- http://dokimos.org/index.aspx

Factores de calidad a evaluar:
1. Usabilidad y navegación
2. Diseño visual y estructura
3. Legibilidad y tipografía
4. Consistencia y coherencia
5. Tiempo de carga y optimización
6. Accesibilidad
7. Contenido relevante y actualizado
8. Propósito claro y llamados a la acción (CTA)
9. Experiencia móvil (responsive design)

## Nota sobre Metodologías Ágiles

Aunque se mencionó brevemente, el profesor indicó que no se profundizaría en metodologías ágiles en esta clase, pero señaló que:

- Las metodologías ágiles son frameworks de trabajo
- Deben adaptarse a las necesidades del equipo
- No al revés (el equipo no debe adaptarse a la metodología)

## Conclusiones Clave

1. La calidad del software es multidimensional y debe evaluarse desde diferentes perspectivas
2. Los modelos de Garvin y McCall siguen siendo relevantes para entender y evaluar la calidad
3. La calidad percibida depende tanto de factores técnicos como de la reputación del proveedor
4. Las métricas son fundamentales para tomar decisiones informadas sobre el desarrollo
5. La usabilidad e intuitividad dependen del contexto y del usuario objetivo

> **Para el examen:** Reconocer las diferentes dimensiones de calidad según Garvin y los factores de calidad según McCall, entendiendo cómo se aplican en diferentes contextos de desarrollo de software.
