services:
  mariadb:
    image: bitnami/mariadb:11.4.5
    container_name: mariadb
    ports:
      - "3307:3306"
    env_file:
      - .env
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    volumes:
      - mariadb_volume:/bitnami/mariadb
      - ./moodle_backup/moodle-database.sql:/docker-entrypoint-initdb.d/moodle-database.sql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p${MARIADB_ROOT_PASSWORD} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  moodle:
    image: bitnami/moodle:4.5.4
    container_name: moodle
    env_file:
      - .env
    environment:
      - MOODLE_DATABASE_HOST=${MOODLE_DATABASE_HOST}
      - MOODLE_DATABASE_PORT_NUMBER=${MOODLE_DATABASE_PORT_NUMBER}
      - MOODLE_DATABASE_USER=${MOODLE_DATABASE_USER}
      - MOODLE_DATABASE_PASSWORD=${MOODLE_DATABASE_PASSWORD}
      - MOODLE_DATABASE_NAME=${MOODLE_DATABASE_NAME}
      - MOODLE_USERNAME=${MOODLE_USERNAME}
      - MOODLE_PASSWORD=${MOODLE_PASSWORD}
      - MOODLE_EMAIL=${MOODLE_EMAIL}
      - MOODLE_SITE_NAME=${MOODLE_SITE_NAME}
      - MOODLE_SKIP_BOOTSTRAP=${MOODLE_SKIP_BOOTSTRAP}
    ports:
      - "8081:8080"
    volumes:
      - moodle_volume:/bitnami/moodle
      - moodledata_volume:/bitnami/moodledata
    depends_on:
      mariadb:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://moodle:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  init-moodledata:
    image: alpine:latest
    volumes:
      - ./moodle_backup/moodledata/filedir:/source/filedir
      - moodledata_volume:/destination
    command: sh -c "mkdir -p /destination/filedir && cp -r /source/filedir/* /destination/filedir/ && chown -R 1001:1001 /destination/filedir"
    depends_on:
      - moodle

  init-keyfile:
    image: mongo:8
    container_name: init_keyfile
    command: >
      sh -c "
      if [ ! -f /etc/mongodb/pki/keyfile ]; then
        echo 'Generando keyfile...';
        openssl rand -base64 756 > /etc/mongodb/pki/keyfile && chmod 400 /etc/mongodb/pki/keyfile;
      else
        echo 'Keyfile ya existe.';
      fi
      "
    volumes:
      - mongo-keyfile-vol:/etc/mongodb/pki
    networks:
      - tesis_network
    restart: "no"

  mongodb:
    image: mongo:8
    container_name: mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_volume:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
      - mongo-keyfile-vol:/etc/mongodb/pki
    env_file:
      - .env
    depends_on:
      - init-keyfile
    command: |
      bash -c '
      echo "Esperando keyfile..."
      while [ ! -f /etc/mongodb/pki/keyfile ]; do sleep 1; done
      
      echo "Keyfile encontrado, iniciando mongod sin autenticación primero..."
      mongod --replSet rs0 --bind_ip_all --port 27017 &
      MONGO_PID=$!
      
      echo "Esperando a que MongoDB inicie..."
      until mongosh --port 27017 --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; do
        sleep 2
      done
      
      echo "Inicializando replica set..."
      mongosh --port 27017 --eval "rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongodb:27017\"}]})"
      
      echo "Esperando a que el replica set se inicialice..."
      sleep 5
      
      echo "Creando usuario administrador..."
      mongosh --port 27017 --eval "
        db = db.getSiblingDB(\"admin\");
        db.createUser({
          user: \"${MONGODB_USERNAME}\",
          pwd: \"${MONGODB_PASSWORD}\",
          roles: [{ role: \"root\", db: \"admin\" }]
        });
        
        db = db.getSiblingDB(\"${MONGODB_DATABASE}\");
        db.createUser({
          user: \"${MONGODB_USERNAME}\",
          pwd: \"${MONGODB_PASSWORD}\",
          roles: [{ role: \"readWrite\", db: \"${MONGODB_DATABASE}\" }]
        });
      "
    
      echo "Deteniendo MongoDB para reiniciar con autenticación..."
      kill $MONGO_PID
      wait $MONGO_PID
      
      echo "Iniciando MongoDB con autenticación..."
      exec mongod --replSet rs0 --bind_ip_all --port 27017 --keyFile /etc/mongodb/pki/keyfile
      '
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  qdrant:
    image: qdrant/qdrant:v1.14.0
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://qdrant:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  servicio-cdc:
    build:
      context: .
      dockerfile: ./Dockerfile.servicio-cdc
    container_name: servicio-cdc
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - NIVEL_LOG=INFO
      - CDC_COLA_NOMBRE=${RABBITMQ_QUEUE_NAME:-moodle_changes}
      - CDC_COLECCIONES=documentos,recursos,archivos
      - CDC_OPERACIONES=insert,update,replace
    restart: always
    networks:
      - tesis_network

  servicio-bytewax:
    build:
      context: .
      dockerfile: ./Dockerfile.servicio-bytewax
    container_name: servicio-bytewax
    depends_on:
      rabbitmq:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_started
    env_file:
      - .env
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_URL=http://ollama:11434
      - NIVEL_LOG=INFO
      - RABBITMQ_QUEUE_NAME=${RABBITMQ_QUEUE_NAME:-moodle_changes}
      - QDRANT_COLLECTION_PREFIX=curso_
      - USAR_OLLAMA=true
      - MODELO_EMBEDDING=all-MiniLM-L6-v2
      - MODELO_TEXTO=llama3
      - TAMANO_CHUNK=1000
      - SOLAPAMIENTO_CHUNK=200
    restart: always
    networks:
      - tesis_network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}
      ME_CONFIG_MONGODB_PORT: ${MONGODB_PORT}
      ME_CONFIG_MONGODB_SERVER: ${MONGODB_HOST}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_AUTH_DATABASE: "admin"
      ME_CONFIG_MONGODB_URL: "mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/?replicaSet=rs0&authSource=admin"
    ports:
      - 8082:8081
    networks:
      - tesis_network
    depends_on:
      mongodb:
        condition: service_healthy
  
  ollama:
    image: docker.io/ollama/ollama:0.6.7
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    environment:
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_EXPERIMENT=client2
      - OLLAMA_CONTEXT_LENGTH=131072
      - OLLAMA_NEW_ENGINE=true
    networks:
      - tesis_network

volumes:
  mariadb_volume:
  moodle_volume:
  moodledata_volume:
  mongodb_volume:
  rabbitmq_data:
  qdrant_data:
  ollama_data:
  mongo-keyfile-vol:

networks:
  tesis_network:
    driver: bridge
