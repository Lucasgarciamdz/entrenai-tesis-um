services:
  mariadb:
    image: bitnami/mariadb:11.4.5
    ports:
      - "3307:3306"
    env_file:
      - .env
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    volumes:
      - mariadb_volume:/bitnami/mariadb
      - ./moodle_backup/moodle-database.sql:/docker-entrypoint-initdb.d/moodle-database.sql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p${MARIADB_ROOT_PASSWORD} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  moodle:
    image: bitnami/moodle:4.5.4
    env_file:
      - .env
    environment:
      - MOODLE_DATABASE_HOST=${MOODLE_DATABASE_HOST}
      - MOODLE_DATABASE_PORT_NUMBER=${MOODLE_DATABASE_PORT_NUMBER}
      - MOODLE_DATABASE_USER=${MOODLE_DATABASE_USER}
      - MOODLE_DATABASE_PASSWORD=${MOODLE_DATABASE_PASSWORD}
      - MOODLE_DATABASE_NAME=${MOODLE_DATABASE_NAME}
      - MOODLE_USERNAME=${MOODLE_USERNAME}
      - MOODLE_PASSWORD=${MOODLE_PASSWORD}
      - MOODLE_EMAIL=${MOODLE_EMAIL}
      - MOODLE_SITE_NAME=${MOODLE_SITE_NAME}
      - MOODLE_SKIP_BOOTSTRAP=${MOODLE_SKIP_BOOTSTRAP}
    ports:
      - "8081:8080"
    volumes:
      - moodle_volume:/bitnami/moodle
      - moodledata_volume:/bitnami/moodledata
    depends_on:
      mariadb:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tesis_network

  init-moodledata:
    image: alpine:latest
    volumes:
      - ./moodle_backup/moodledata/filedir:/source/filedir
      - moodledata_volume:/destination
    command: sh -c "mkdir -p /destination/filedir && cp -r /source/filedir/* /destination/filedir/ && chown -R 1001:1001 /destination/filedir"
    depends_on:
      - moodle

  mongodb:
    image: mongo:8
    ports:
      - "27017:27017"
    volumes:
      - mongodb_volume:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  rabbitmq:
    image: rabbitmq:4.1-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tesis_network

  qdrant:
    image: qdrant/qdrant:v1.14.0
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: always
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://qdrant:6333/healthz"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s
    networks:
      - tesis_network

  # servicio-cdc:
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile.servicio-cdc
  #   container_name: servicio-cdc
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     - MONGODB_HOST=mongodb
  #     - MONGODB_PORT=27017
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - NIVEL_LOG=INFO
  #   restart: always
  #   networks:
  #     - tesis_network

  # servicio-bytewax:
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile.servicio-bytewax
  #   container_name: servicio-bytewax
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     - RABBITMQ_HOST=rabbitmq
  #     - RABBITMQ_PORT=5672
  #     - QDRANT_HOST=qdrant
  #     - QDRANT_PORT=6334
  #     - NIVEL_LOG=INFO
  #   restart: always
  #   networks:
  #     - tesis_network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD}
      ME_CONFIG_MONGODB_PORT: ${MONGODB_PORT}
      ME_CONFIG_MONGODB_SERVER: ${MONGODB_HOST}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    ports:
      - 8082:8081
    networks:
      - tesis_network
    depends_on:
      mongodb:
        condition: service_healthy
  
  ollama:
    image: docker.io/ollama/ollama:0.6.7
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: always
    environment:
      - OLLAMA_KEEP_ALIVE=5m
      - OLLAMA_HOST=0.0.0.0
    networks:
      - tesis_network

volumes:
  mariadb_volume:
  moodle_volume:
  moodledata_volume:
  mongodb_volume:
  rabbitmq_data:
  qdrant_data:
  ollama_data:

networks:
  tesis_network:
    driver: bridge
